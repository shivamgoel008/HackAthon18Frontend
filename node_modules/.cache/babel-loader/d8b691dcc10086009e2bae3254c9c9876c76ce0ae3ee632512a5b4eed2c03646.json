{"ast":null,"code":"export function getCookie() {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${\"jwtToken\"}=`);\n  if (parts.length === 2) return parts.pop().split(';').shift();\n  return null;\n}\nexport function clearCookiesOnLogout() {\n  debugger;\n  const cookies = document.cookie.split(\";\");\n  for (const cookie of cookies) {\n    const cookieName = cookie.split(\"=\")[0].trim();\n    document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n  }\n  console.log(\"All cookies cleared on logout.\");\n}\nexport function getSubjectFromJwt(token) {\n  if (!token) return null;\n  try {\n    const [, payloadBase64] = token.split(\".\");\n    if (!payloadBase64) return null;\n    const payload = JSON.parse(atob(payloadBase64));\n    return payload.sub || null;\n  } catch (error) {\n    console.error(\"Failed to decode JWT token:\", error);\n    return null;\n  }\n}","map":{"version":3,"names":["getCookie","value","document","cookie","parts","split","length","pop","shift","clearCookiesOnLogout","cookies","cookieName","trim","console","log","getSubjectFromJwt","token","payloadBase64","payload","JSON","parse","atob","sub","error"],"sources":["/Users/shivam/Development/VS Code/HackAthon18Frontend/src/Utils/helper.js"],"sourcesContent":["\nexport function getCookie() {\n    const value = `; ${document.cookie}`;\n    const parts = value.split(`; ${\"jwtToken\"}=`);\n    if (parts.length === 2) return parts.pop().split(';').shift();\n    return null;\n}\n\n\nexport function clearCookiesOnLogout() {\n    debugger\n    const cookies = document.cookie.split(\";\");\n\n    for (const cookie of cookies) {\n        const cookieName = cookie.split(\"=\")[0].trim();\n        document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n    }\n\n    console.log(\"All cookies cleared on logout.\");\n}\n\nexport function getSubjectFromJwt(token) {\n    if (!token) return null;\n\n    try {\n        const [, payloadBase64] = token.split(\".\");\n\n        if (!payloadBase64) return null;\n\n        const payload = JSON.parse(atob(payloadBase64));\n\n        return payload.sub || null;\n    } catch (error) {\n        console.error(\"Failed to decode JWT token:\", error);\n        return null;\n    }\n}"],"mappings":"AACA,OAAO,SAASA,SAASA,CAAA,EAAG;EACxB,MAAMC,KAAK,GAAG,KAAKC,QAAQ,CAACC,MAAM,EAAE;EACpC,MAAMC,KAAK,GAAGH,KAAK,CAACI,KAAK,CAAC,KAAK,UAAU,GAAG,CAAC;EAC7C,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE,OAAOF,KAAK,CAACG,GAAG,CAAC,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC,CAACG,KAAK,CAAC,CAAC;EAC7D,OAAO,IAAI;AACf;AAGA,OAAO,SAASC,oBAAoBA,CAAA,EAAG;EACnC;EACA,MAAMC,OAAO,GAAGR,QAAQ,CAACC,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;EAE1C,KAAK,MAAMF,MAAM,IAAIO,OAAO,EAAE;IAC1B,MAAMC,UAAU,GAAGR,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACO,IAAI,CAAC,CAAC;IAC9CV,QAAQ,CAACC,MAAM,GAAG,GAAGQ,UAAU,mDAAmD;EACtF;EAEAE,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;AACjD;AAEA,OAAO,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EACrC,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EAEvB,IAAI;IACA,MAAM,GAAGC,aAAa,CAAC,GAAGD,KAAK,CAACX,KAAK,CAAC,GAAG,CAAC;IAE1C,IAAI,CAACY,aAAa,EAAE,OAAO,IAAI;IAE/B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACJ,aAAa,CAAC,CAAC;IAE/C,OAAOC,OAAO,CAACI,GAAG,IAAI,IAAI;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZV,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,IAAI;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}