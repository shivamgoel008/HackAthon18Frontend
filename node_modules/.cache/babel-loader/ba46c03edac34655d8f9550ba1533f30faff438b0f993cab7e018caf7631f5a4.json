{"ast":null,"code":"import axios from \"axios\";\nimport { API_BASE_URL } from '../Utils/constants';\nimport { getCookie } from '../Utils/helper';\nexport const gptResponse = async (chat_id, content) => {\n  debugger;\n  const payload = {\n    chat_id: chat_id,\n    message: {\n      content: content,\n      role: \"user\"\n    }\n  };\n  try {\n    const response = await axios.post(`${API_BASE_URL}/chat_history/chat`, payload, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${getCookie()}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error during login\", error);\n    throw error;\n  }\n};\nexport const allChatHistory = async () => {\n  try {\n    debugger;\n    const response = await axios.get(`${API_BASE_URL}/chat_history/user`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${getCookie()}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error during login\", error);\n    throw error;\n  }\n};\nexport const chatHistory = async chat_id => {\n  try {\n    debugger;\n    const response = await axios.get(`${API_BASE_URL}/chat_history/chat?chat_id=${chat_id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${getCookie()}`\n      }\n    });\n    return response.data.messages;\n  } catch (error) {\n    console.error(\"Error during login\", error);\n    throw error;\n  }\n};\nexport const saveMessage = async (chatId, message) => {\n  try {\n    await axios.post(`/api/chats/${chatId}/messages`, message);\n  } catch (err) {\n    console.error(\"Error saving message:\", err);\n    throw new Error(\"Failed to save message.\");\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","getCookie","gptResponse","chat_id","content","payload","message","role","response","post","headers","data","error","console","allChatHistory","get","chatHistory","messages","saveMessage","chatId","err","Error"],"sources":["/Users/shivam/Development/VS Code/HackAthon18Frontend/src/services/chatService.js"],"sourcesContent":["import axios from \"axios\";\nimport { API_BASE_URL } from '../Utils/constants'\nimport {getCookie} from '../Utils/helper'\n\n\nexport const gptResponse = async (chat_id,content) => {\n    debugger\n    const payload = {\n        chat_id: chat_id,\n        message: {\n            content: content,\n            role: \"user\"\n        }\n    };\n    try {\n        const response = await axios.post(`${API_BASE_URL}/chat_history/chat`, payload, {\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${getCookie()}` \n            },\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Error during login\", error);\n        throw error;\n    }\n};\n\nexport const allChatHistory = async () => {\n    try {\n        debugger\n        const response = await axios.get(`${API_BASE_URL}/chat_history/user`, {\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${getCookie()}` \n            },\n        });\n        return response.data;\n    } catch (error) {\n        console.error(\"Error during login\", error);\n        throw error;\n    }\n};\n\n\nexport const chatHistory = async (chat_id) => {\n    try {\n        debugger\n        const response = await axios.get(`${API_BASE_URL}/chat_history/chat?chat_id=${chat_id}`, {\n            headers: { \n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${getCookie()}` \n            },\n        });\n        return response.data.messages;\n    } catch (error) {\n        console.error(\"Error during login\", error);\n        throw error;\n    }\n};\n\n\nexport const saveMessage = async (chatId, message) => {\n    try {\n        await axios.post(`/api/chats/${chatId}/messages`, message);\n    } catch (err) {\n        console.error(\"Error saving message:\", err);\n        throw new Error(\"Failed to save message.\");\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAAQC,SAAS,QAAO,iBAAiB;AAGzC,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAACC,OAAO,KAAK;EAClD;EACA,MAAMC,OAAO,GAAG;IACZF,OAAO,EAAEA,OAAO;IAChBG,OAAO,EAAE;MACLF,OAAO,EAAEA,OAAO;MAChBG,IAAI,EAAE;IACV;EACJ,CAAC;EACD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,YAAY,oBAAoB,EAAEK,OAAO,EAAE;MAC5EK,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUT,SAAS,CAAC,CAAC;MAC1C;IACJ,CAAC,CAAC;IACF,OAAOO,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACA;IACA,MAAMN,QAAQ,GAAG,MAAMT,KAAK,CAACgB,GAAG,CAAC,GAAGf,YAAY,oBAAoB,EAAE;MAClEU,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUT,SAAS,CAAC,CAAC;MAC1C;IACJ,CAAC,CAAC;IACF,OAAOO,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACf;AACJ,CAAC;AAGD,OAAO,MAAMI,WAAW,GAAG,MAAOb,OAAO,IAAK;EAC1C,IAAI;IACA;IACA,MAAMK,QAAQ,GAAG,MAAMT,KAAK,CAACgB,GAAG,CAAC,GAAGf,YAAY,8BAA8BG,OAAO,EAAE,EAAE;MACrFO,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUT,SAAS,CAAC,CAAC;MAC1C;IACJ,CAAC,CAAC;IACF,OAAOO,QAAQ,CAACG,IAAI,CAACM,QAAQ;EACjC,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAMA,KAAK;EACf;AACJ,CAAC;AAGD,OAAO,MAAMM,WAAW,GAAG,MAAAA,CAAOC,MAAM,EAAEb,OAAO,KAAK;EAClD,IAAI;IACA,MAAMP,KAAK,CAACU,IAAI,CAAC,cAAcU,MAAM,WAAW,EAAEb,OAAO,CAAC;EAC9D,CAAC,CAAC,OAAOc,GAAG,EAAE;IACVP,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEQ,GAAG,CAAC;IAC3C,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC9C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}